TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP mary_PN) (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N)))))))
TestAttemptoAce: Mary is a traveler .
TestAttemptoCat: Mary és un viatger .
TestAttemptoDan: Mary er en rejsende .
TestAttemptoDut: Mary is een reiziger .
TestAttemptoEng: Mary is a traveler .
TestAttemptoFin: Mary on matkustaja .
TestAttemptoFre: Mary est un voyageur .
TestAttemptoGer: Mary ist ein Reisende .
TestAttemptoIta: Mary è un viaggiatore .
TestAttemptoLav: Mary ir ceļotājs .
TestAttemptoNor: Mary er ei reisende .
TestAttemptoPol: Paryż jest mężczyzną .
TestAttemptoSpa: Mary es un viajero .
TestAttemptoSwe: Mary är en resenär .

TestAttempto: baseText (sText (simpleS_as_S (neg_vpS (pnNP bill_PN) (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N)))))))
TestAttemptoAce: Bill isn't a golfer .
TestAttemptoCat: Bill no és una golfista .
TestAttemptoDan: Bill er ikke en golfspiller .
TestAttemptoDut: Bill is niet een golfer .
TestAttemptoEng: Bill isn't a golfer .
TestAttemptoFin: Bill ei ole golfaaja .
TestAttemptoFre: Bill n' est pas un golfeur .
TestAttemptoGer: Bill ist nicht ein Golfer .
TestAttemptoIta: Bill non è un giocatore di golf .
TestAttemptoLav: Bill nav golfa spēlētājs .
TestAttemptoNor: Bill er ikke en golfspiller .
TestAttemptoPol: Paryż nie jest mężczyzną .
TestAttemptoSpa: Bill no es una golfista .
TestAttemptoSwe: Bill är inte ett golfspelare .

TestAttempto: baseText (sText (simpleS_as_S (np_coord_VPS (pnNP mary_PN) or_Conj (BaseVPS (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N))))) (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N)))))))))
TestAttemptoAce: Mary is an officer or is a golfer .
TestAttemptoCat: Mary és un oficial o és una golfista .
TestAttemptoDan: Mary er en officer eller er en golfspiller .
TestAttemptoDut: Mary is een officier of is een golfer .
TestAttemptoEng: Mary is an officer or is a golfer .
TestAttemptoFin: Mary on upseeri tai on golfaaja .
TestAttemptoFre: Mary est un officier ou il est un golfeur .
TestAttemptoGer: Mary ist ein Offizier oder ist ein Golfer .
TestAttemptoIta: Mary è un ufficiale o è un giocatore di golf .
TestAttemptoLav: [np_coord_VPS] .
TestAttemptoNor: Mary er en offiser eller er en golfspiller .
TestAttemptoPol: [np_coord_VPS] .
TestAttemptoSpa: Mary es un funcionario o es una golfista .
TestAttemptoSwe: Mary är en befäl eller är ett golfspelare .

TestAttempto: baseText (sText (simpleS_as_S (np_coord_VPS (pnNP sue_PN) and_Conj (BaseVPS (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N))))) (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N)))))))))
TestAttemptoAce: Sue is an officer and is a traveler .
TestAttemptoCat: Sue és un oficial i és un viatger .
TestAttemptoDan: Sue er en officer og er en rejsende .
TestAttemptoDut: Sue is een officier en is een reiziger .
TestAttemptoEng: Sue is an officer and is a traveler .
TestAttemptoFin: Sue on upseeri ja on matkustaja .
TestAttemptoFre: Sue est un officier et elle est un voyageur .
TestAttemptoGer: Sue ist ein Offizier und ist ein Reisende .
TestAttemptoIta: Sue è un ufficiale ed è un viaggiatore .
TestAttemptoLav: [np_coord_VPS] .
TestAttemptoNor: Sue er en offiser og er ei reisende .
TestAttemptoPol: [np_coord_VPS] .
TestAttemptoSpa: Sue es un funcionario y es un viajero .
TestAttemptoSwe: Sue är en befäl och är en resenär .

TestAttempto: baseText (sText (simpleS_as_S (vpS (everyNP (cn_as_VarCN man_N)) (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N)))))))
TestAttemptoAce: every man is a golfer .
TestAttemptoCat: cada home és una golfista .
TestAttemptoDan: hver mand er en golfspiller .
TestAttemptoDut: elke man is een golfer .
TestAttemptoEng: every man is a golfer .
TestAttemptoFin: jokainen mies on golfaaja .
TestAttemptoFre: chaque homme est un golfeur .
TestAttemptoGer: jeder Mann ist ein Golfer .
TestAttemptoIta: ogni uomo è un giocatore di golf .
TestAttemptoLav: ikviens vīrietis ir golfa spēlētājs .
TestAttemptoNor: hver mann er en golfspiller .
TestAttemptoPol: każdy mężczyzna jest mężczyzną .
TestAttemptoSpa: cada hombre es una golfista .
TestAttemptoSwe: varje man är ett golfspelare .

TestAttempto: baseText (sText (simpleS_as_S (vpS (noNP (cn_as_VarCN golfer_N)) (npVP (thereNP_as_NP (aNP (cn_as_VarCN woman_N)))))))
TestAttemptoAce: no golfer is a woman .
TestAttemptoCat: cap golfista és una dona .
TestAttemptoDan: 
TestAttemptoDut: geen golfer is een vrouw .
TestAttemptoEng: no golfer is a woman .
TestAttemptoFin: mikään golfaaja ei ole nainen .
TestAttemptoFre: aucun golfeur n' est une femme .
TestAttemptoGer: kein Golfer ist eine Frau .
TestAttemptoIta: nessuno giocatore di golf è una donna .
TestAttemptoLav: 
TestAttemptoNor: 
TestAttemptoPol: żaden mężczyzna jest kobietą .
TestAttemptoSpa: hacia golfista es una mujer .
TestAttemptoSwe: inget golfspelare är en kvinna .

TestAttempto: baseText (sText (coordS and_Conj (simpleS_as_S (vpS (everyNP (cn_as_VarCN woman_N)) (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N)))))) (simpleS_as_S (vpS (everyNP (cn_as_VarCN officer_N)) (npVP (thereNP_as_NP (aNP (cn_as_VarCN woman_N))))))))
TestAttemptoAce: every woman is an officer and every officer is a woman .
TestAttemptoCat: cada dona és un oficial i cada oficial és una dona .
TestAttemptoDan: hver kvinde er en officer og hver officer er en kvinde .
TestAttemptoDut: elke vrouw is een officier en elke officier is een vrouw .
TestAttemptoEng: every woman is an officer and every officer is a woman .
TestAttemptoFin: jokainen nainen on upseeri ja jokainen upseeri on nainen .
TestAttemptoFre: chaque femme est un officier et chaque officier est une femme .
TestAttemptoGer: jede Frau ist ein Offizier und jeder Offizier ist eine Frau .
TestAttemptoIta: ogni donna è un ufficiale ed ogni ufficiale è una donna .
TestAttemptoLav: ikviena sieviete ir amatpersona un ikviena amatpersona ir sieviete .
TestAttemptoNor: hver kvinne er en offiser og hver offiser er ei kvinne .
TestAttemptoPol: każda kobieta jest mężczyzną i każdy mężczyzna jest kobietą .
TestAttemptoSpa: cada mujer es un funcionario y cada funcionario es una mujer .
TestAttemptoSwe: varje kvinna är en befäl och varje befäl är en kvinna .

TestAttempto: baseText (sText (simpleS_as_S (vpS (everyNP (relCN (cn_as_VarCN traveler_N) (neg_predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN woman_N))))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N)))))))
TestAttemptoAce: every traveler who isn't a woman is a golfer .
TestAttemptoCat: cada viatger que no és una dona és una golfista .
TestAttemptoDan: hver rejsende som ikke er en kvinde er en golfspiller .
TestAttemptoDut: elke reiziger die niet een vrouw is is een golfer .
TestAttemptoEng: every traveler who isn't a woman is a golfer .
TestAttemptoFin: jokainen matkustaja joka ei ole nainen on golfaaja .
TestAttemptoFre: chaque voyageur qui n' est pas une femme est un golfeur .
TestAttemptoGer: jeder Reisende der nicht eine Frau ist ist ein Golfer .
TestAttemptoIta: ogni viaggiatore che non è una donna è un giocatore di golf .
TestAttemptoLav: ikviens ceļotājs , kurš nav sieviete ir golfa spēlētājs .
TestAttemptoNor: hver reisende som ikke er ei kvinne er en golfspiller .
TestAttemptoPol: każdy mężczyzna , który nie jest kobietą jest mężczyzną .
TestAttemptoSpa: cada viajero que no es una mujer es una golfista .
TestAttemptoSwe: varje resenär som inte är en kvinna är ett golfspelare .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (everyNP (cn_as_VarCN traveler_N)) (neg_predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN woman_N)))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N)))))))
TestAttemptoAce: every traveler who isn't a woman is a golfer .
TestAttemptoCat: cada viatger que no és una dona és una golfista .
TestAttemptoDan: hver rejsende , som ikke er en kvinde er en golfspiller .
TestAttemptoDut: elke reiziger , dat niet een vrouw is is een golfer .
TestAttemptoEng: every traveler who isn't a woman is a golfer .
TestAttemptoFin: jokainen matkustaja , joka ei ole nainen on golfaaja .
TestAttemptoFre: chaque voyageur qui n' est pas une femme est un golfeur .
TestAttemptoGer: jeder Reisende , der nicht eine Frau ist ist ein Golfer .
TestAttemptoIta: ogni viaggiatore che non è una donna è un giocatore di golf .
TestAttemptoLav: ikviens ceļotājs , kurš nav sieviete ir golfa spēlētājs .
TestAttemptoNor: hver reisende , som ikke er ei kvinne er en golfspiller .
TestAttemptoPol: każdy mężczyzna , który nie jest kobietą jest mężczyzną .
TestAttemptoSpa: cada viajero que no es una mujer es una golfista .
TestAttemptoSwe: varje resenär , som inte är en kvinna är ett golfspelare .

TestAttempto: baseText (sText (simpleS_as_S (np_coord_VPS (everyNP (cn_as_VarCN man_N)) or_Conj (BaseVPS (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N))))) (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N)))))))))
TestAttemptoAce: every man is a golfer or is a traveler .
TestAttemptoCat: cada home és una golfista o és un viatger .
TestAttemptoDan: hver mand er en golfspiller eller er en rejsende .
TestAttemptoDut: elke man is een golfer of is een reiziger .
TestAttemptoEng: every man is a golfer or is a traveler .
TestAttemptoFin: jokainen mies on golfaaja tai on matkustaja .
TestAttemptoFre: chaque homme est un golfeur ou il est un voyageur .
TestAttemptoGer: jeder Mann ist ein Golfer oder ist ein Reisende .
TestAttemptoIta: ogni uomo è un giocatore di golf o è un viaggiatore .
TestAttemptoLav: [np_coord_VPS] .
TestAttemptoNor: hver mann er en golfspiller eller er ei reisende .
TestAttemptoPol: [np_coord_VPS] .
TestAttemptoSpa: cada hombre es una golfista o es un viajero .
TestAttemptoSwe: varje man är ett golfspelare eller är en resenär .

TestAttempto: baseText (sText (simpleS_as_S (np_coord_VPS (relNP (indefPronNP nobody_IPron) (orRS (predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN man_N))))) (predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN golfer_N))))))) and_Conj (BaseVPS (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N))))) (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N)))))))))
TestAttemptoAce: nobody who is a man or who is a golfer is an officer and is a traveler .
TestAttemptoCat: ningú que és un home o que és una golfista és un oficial i és un viatger .
TestAttemptoDan: ingen , som er en mand eller som er en golfspiller er en officer og er en rejsende .
TestAttemptoDut: niemand , die een man is of die een golfer is is een officier en is een reiziger .
TestAttemptoEng: nobody who is a man or who is a golfer is an officer and is a traveler .
TestAttemptoFin: kukaan , joka on mies tai joka on golfaaja on upseeri ja on matkustaja .
TestAttemptoFre: personne qui est un homme ou qui est un golfeur n' est un officier et elle n' est un voyageur .
TestAttemptoGer: niemand , das ein Mann ist oder das ein Golfer ist ist ein Offizier und ist ein Reisende .
TestAttemptoIta: nessuno che è un uomo o che è un giocatore di golf è un ufficiale ed è un viaggiatore .
TestAttemptoLav: [np_coord_VPS] .
TestAttemptoNor: ingen , som er en mann eller som er en golfspiller er en offiser og er ei reisende .
TestAttemptoPol: [np_coord_VPS] .
TestAttemptoSpa: nadie que es un hombre o que es una golfista es un funcionario y es un viajero .
TestAttemptoSwe: ingen , som är en man eller som är ett golfspelare är en befäl och är en resenär .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP lisa_PN) (v2VP see_V2 (pnNP mary_PN)))))
TestAttemptoAce: Lisa sees Mary .
TestAttemptoCat: Lisa veu Mary .
TestAttemptoDan: Lisa ser Mary .
TestAttemptoDut: Lisa ziet Mary .
TestAttemptoEng: Lisa sees Mary .
TestAttemptoFin: Lisa näkee Maryn .
TestAttemptoFre: Lisa voit Mary .
TestAttemptoGer: Lisa sieht Mary .
TestAttemptoIta: Lisa vede Mary .
TestAttemptoLav: Lisa redz Mary .
TestAttemptoNor: Lisa ser Mary .
TestAttemptoPol: Paryż widzi Paryż .
TestAttemptoSpa: Lisa ve Mary .
TestAttemptoSwe: Lisa ser Mary .

TestAttempto: baseText (sText (simpleS_as_S (neg_vpS (pnNP mary_PN) (v2VP see_V2 (pnNP tom_PN)))))
TestAttemptoAce: Mary doesn't see Tom .
TestAttemptoCat: Mary no veu Tom .
TestAttemptoDan: Mary ser ikke Tom .
TestAttemptoDut: Mary ziet niet Tom .
TestAttemptoEng: Mary doesn't see Tom .
TestAttemptoFin: Mary ei näe Tomia .
TestAttemptoFre: Mary ne voit pas Tom .
TestAttemptoGer: Mary sieht Tom nicht .
TestAttemptoIta: Mary non vede Tom .
TestAttemptoLav: Mary neredz Tom .
TestAttemptoNor: Mary ser ikke Tom .
TestAttemptoPol: Paryż nie widzi Paryża .
TestAttemptoSpa: Mary no ve Tom .
TestAttemptoSwe: Mary ser inte Tom .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP tom_PN) (v2VP buy_V2 (thereNP_as_NP (aNP (cn_as_VarCN picture_N)))))))
TestAttemptoAce: Tom buys a picture .
TestAttemptoCat: Tom compra un imatge .
TestAttemptoDan: Tom køber en billede .
TestAttemptoDut: Tom koopt een schilderij .
TestAttemptoEng: Tom buys a picture .
TestAttemptoFin: Tom ostaa kuvan .
TestAttemptoFre: Tom achète une image .
TestAttemptoGer: Tom kauft ein Bild .
TestAttemptoIta: Tom compra un immagine .
TestAttemptoLav: Tom pērk attēlu .
TestAttemptoNor: Tom kjøper ei bilde .
TestAttemptoPol: Paryż kupi mężczyznę .
TestAttemptoSpa: Tom compra un imagen .
TestAttemptoSwe: Tom köper en bild .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP mary_PN) (v2VP see_V2 (noNP (cn_as_VarCN man_N))))))
TestAttemptoAce: Mary sees no man .
TestAttemptoCat: Mary no veu cap home .
TestAttemptoDan: 
TestAttemptoDut: Mary ziet geen man .
TestAttemptoEng: Mary sees no man .
TestAttemptoFin: Mary ei näe mitään miestä .
TestAttemptoFre: Mary ne voit aucun homme .
TestAttemptoGer: Mary sieht keinen Mann .
TestAttemptoIta: Mary non vede nessuno uomo .
TestAttemptoLav: 
TestAttemptoNor: 
TestAttemptoPol: Paryż widzi żadnego mężczyznę .
TestAttemptoSpa: Mary no ve hacia hombre .
TestAttemptoSwe: Mary ser ingen man .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP john_PN) (v2VP buy_V2 (relNP (thereNP_as_NP (indefTherePronNP something_IPron)) (neg_predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN present_N))))))))))
TestAttemptoAce: John buys something which isn't a present .
TestAttemptoCat: John compra quelcom que no és un presentar .
TestAttemptoDan: John køber noget , som ikke er en gave .
TestAttemptoDut: John koopt iets , die niet een cadeau is .
TestAttemptoEng: John buys something which isn't a present .
TestAttemptoFin: John ostaa jonkin , joka ei ole lahja .
TestAttemptoFre: John achète quelque chose qui n' est pas un cadeau .
TestAttemptoGer: John kauft etwas , das nicht ein Geschenk ist .
TestAttemptoIta: John compra qualche cosa che non è un regalo .
TestAttemptoLav: John pērk kaut ku , kurš nav klāt .
TestAttemptoNor: John kjøper noe , som ikke er ei gave .
TestAttemptoPol: Jan kupi coś , które nie jest mężczyzną .
TestAttemptoSpa: John compra algo que no es un regalo .
TestAttemptoSwe: John köper något , som inte är en present .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP john_PN) (v2VP see_V2 (nothing_butNP (cn_as_VarCN man_N))))))
TestAttemptoAce: John sees nothing but men .
TestAttemptoCat: John veu nomÈs homes .
TestAttemptoDan: John ser kun mænd .
TestAttemptoDut: John ziet slechts mannen .
TestAttemptoEng: John sees nothing but men .
TestAttemptoFin: John näkee vain miehiä .
TestAttemptoFre: John voit seulement des hommes .
TestAttemptoGer: John sieht nur Männer .
TestAttemptoIta: John vede soltanto uomini .
TestAttemptoLav: John redz tikai vīriešus .
TestAttemptoNor: John ser kun menn .
TestAttemptoPol: Jan widzi tylko mężczyzn .
TestAttemptoSpa: John ve solamente hombres .
TestAttemptoSwe: John ser bara män .

TestAttempto: baseText (sText (simpleS_as_S (vpS (everyNP (cn_as_VarCN man_N)) (v2VP buy_V2 (thereNP_as_NP (aNP (cn_as_VarCN present_N)))))))
TestAttemptoAce: every man buys a present .
TestAttemptoCat: cada home compra un presentar .
TestAttemptoDan: hver mand køber en gave .
TestAttemptoDut: elke man koopt een cadeau .
TestAttemptoEng: every man buys a present .
TestAttemptoFin: jokainen mies ostaa lahjan .
TestAttemptoFre: chaque homme achète un cadeau .
TestAttemptoGer: jeder Mann kauft ein Geschenk .
TestAttemptoIta: ogni uomo compra un regalo .
TestAttemptoLav: ikviens vīrietis pērk klāt .
TestAttemptoNor: hver mann kjøper ei gave .
TestAttemptoPol: każdy mężczyzna kupi mężczyznę .
TestAttemptoSpa: cada hombre compra un regalo .
TestAttemptoSwe: varje man köper en present .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2VP buy_V2 (thereNP_as_NP (aNP (cn_as_VarCN present_N)))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN man_N)))))))
TestAttemptoAce: everything which buys a present is a man .
TestAttemptoCat: tot que compra un presentar és un home .
TestAttemptoDan: alt , som køber en gave er en mand .
TestAttemptoDut: alles , dat een cadeau koopt is een man .
TestAttemptoEng: everything which buys a present is a man .
TestAttemptoFin: kaikki , joka ostaa lahjan on mies .
TestAttemptoFre: tout qui achète un cadeau est un homme .
TestAttemptoGer: alles , das ein Geschenk kauft ist ein Mann .
TestAttemptoIta: tutto che compra un regalo è un uomo .
TestAttemptoLav: viss , kurš pērk klāt ir vīrietis .
TestAttemptoNor: alt , som kjøper ei gave er en mann .
TestAttemptoPol: wszystko , które kupi mężczyznę jest mężczyzną .
TestAttemptoSpa: todo que compra un regalo es un hombre .
TestAttemptoSwe: allting , som köper en present är en man .

TestAttempto: baseText (sText (simpleS_as_S (vpS (everyNP (cn_as_VarCN man_N)) (v2VP buy_V2 (nothing_butNP (cn_as_VarCN present_N))))))
TestAttemptoAce: every man buys nothing but presents .
TestAttemptoCat: cada home compra nomÈs presentars .
TestAttemptoDan: hver mand køber kun gaver .
TestAttemptoDut: elke man koopt slechts cadeaus .
TestAttemptoEng: every man buys nothing but presents .
TestAttemptoFin: jokainen mies ostaa vain lahjoja .
TestAttemptoFre: chaque homme achète seulement des cadeaux .
TestAttemptoGer: jeder Mann kauft nur Geschenke .
TestAttemptoIta: ogni uomo compra soltanto regali .
TestAttemptoLav: ikviens vīrietis pērk tikai klāt .
TestAttemptoNor: hver mann kjøper kun gaver .
TestAttemptoPol: każdy mężczyzna kupi tylko mężczyzn .
TestAttemptoSpa: cada hombre compra solamente regalos .
TestAttemptoSwe: varje man köper bara presentar .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2VP buy_V2 (nothing_butNP (cn_as_VarCN picture_N))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN woman_N)))))))
TestAttemptoAce: everything which buys nothing but pictures is a woman .
TestAttemptoCat: tot que compra nomÈs imatges és una dona .
TestAttemptoDan: alt , som køber kun billeder er en kvinde .
TestAttemptoDut: alles , dat slechts schilderijen koopt is een vrouw .
TestAttemptoEng: everything which buys nothing but pictures is a woman .
TestAttemptoFin: kaikki , joka ostaa vain kuvia on nainen .
TestAttemptoFre: tout qui achète seulement des images est une femme .
TestAttemptoGer: alles , das nur Bilder kauft ist eine Frau .
TestAttemptoIta: tutto che compra soltanto immagini è una donna .
TestAttemptoLav: viss , kurš pērk tikai attēlu ir sieviete .
TestAttemptoNor: alt , som kjøper kun bilder er ei kvinne .
TestAttemptoPol: wszystko , które kupi tylko mężczyzn jest kobietą .
TestAttemptoSpa: todo que compra solamente imagenes es una mujer .
TestAttemptoSwe: allting , som köper bara bildar är en kvinna .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2VP see_V2 (thereNP_as_NP (indefTherePronNP something_IPron))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N)))))))
TestAttemptoAce: everything which sees something is an officer .
TestAttemptoCat: tot que veu quelcom és un oficial .
TestAttemptoDan: alt , som ser noget er en officer .
TestAttemptoDut: alles , dat iets ziet is een officier .
TestAttemptoEng: everything which sees something is an officer .
TestAttemptoFin: kaikki , joka näkee jonkin on upseeri .
TestAttemptoFre: tout qui voit quelque chose est un officier .
TestAttemptoGer: alles , das etwas sieht ist ein Offizier .
TestAttemptoIta: tutto che vede qualche cosa è un ufficiale .
TestAttemptoLav: viss , kurš redz kaut ku ir amatpersona .
TestAttemptoNor: alt , som ser noe er en offiser .
TestAttemptoPol: wszystko , które widzi coś jest mężczyzną .
TestAttemptoSpa: todo que ve algo es un funcionario .
TestAttemptoSwe: allting , som ser något är en befäl .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2_byVP love_V2 (thereNP_as_NP (indefTherePronNP something_IPron))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN person_N)))))))
TestAttemptoAce: everything which is loved by something is a person .
TestAttemptoCat: tot que és estimat per quelcom és una persona .
TestAttemptoDan: alt , som bliver elsket af noget er en person .
TestAttemptoDut: alles , dat door iets liefgehad wordt is een persoon .
TestAttemptoEng: everything which is loved by something is a person .
TestAttemptoFin: kaikki , jota rakastetaan jonkin toimesta on henkilö .
TestAttemptoFre: tout qui est aimé par quelque chose est une personne .
TestAttemptoGer: alles , das durch etwas geliebt wird ist eine Person .
TestAttemptoIta: tutto che viene amato da qualche cosa è una persona .
TestAttemptoLav: viss , kurš mīl NON_EXISTENT kaut ka ir cilvēks .
TestAttemptoNor: alt , som blir elska av noe er en person .
TestAttemptoPol: wszystko , które przez coś jest kochane jest mężczyzną .
TestAttemptoSpa: todo que es amado por algo es una persona .
TestAttemptoSwe: allting , som blir älskat av något är en person .

TestAttempto: baseText (sText (simpleS_as_S (np_coord_VPS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2VP love_V2 (thereNP_as_NP (indefTherePronNP something_IPron))))) or_Conj (BaseVPS (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N))))) (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N)))))))))
TestAttemptoAce: everything which loves something is a traveler or is an officer .
TestAttemptoCat: tot que estima quelcom és un viatger o és un oficial .
TestAttemptoDan: alt , som elsker noget er en rejsende eller er en officer .
TestAttemptoDut: alles , dat iets lief heeft is een reiziger of is een officier .
TestAttemptoEng: everything which loves something is a traveler or is an officer .
TestAttemptoFin: kaikki , joka rakastaa jotakin on matkustaja tai on upseeri .
TestAttemptoFre: tout qui aime quelque chose est un voyageur ou il est un officier .
TestAttemptoGer: alles , das etwas liebt ist ein Reisende oder ist ein Offizier .
TestAttemptoIta: tutto che ama qualche cosa è un viaggiatore o è un ufficiale .
TestAttemptoLav: [np_coord_VPS] .
TestAttemptoNor: alt , som elsker noe er ei reisende eller er en offiser .
TestAttemptoPol: [np_coord_VPS] .
TestAttemptoSpa: todo que ama algo es un viajero o es un funcionario .
TestAttemptoSwe: allting , som älskar något är en resenär eller är en befäl .

TestAttempto: baseText (sText (simpleS_as_S (np_coord_VPS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2_byVP see_V2 (thereNP_as_NP (indefTherePronNP something_IPron))))) or_Conj (BaseVPS (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N))))) (vp_as_posVPS (npVP (thereNP_as_NP (aNP (cn_as_VarCN aquarium_N)))))))))
TestAttemptoAce: everything which is seen by something is a traveler or is an aquarium .
TestAttemptoCat: tot que és vist per quelcom és un viatger o és un aquari .
TestAttemptoDan: alt , som bliver set af noget er en rejsende eller er en akvarium .
TestAttemptoDut: alles , dat door iets gezien wordt is een reiziger of is een aquarium .
TestAttemptoEng: everything which is seen by something is a traveler or is an aquarium .
TestAttemptoFin: kaikki , joka nähdään jonkin toimesta on matkustaja tai on akvaario .
TestAttemptoFre: tout qui est vu par quelque chose est un voyageur ou il est un aquarium .
TestAttemptoGer: alles , das durch etwas gesehen wird ist ein Reisende oder ist ein Aquarium .
TestAttemptoIta: tutto che viene visto da qualche cosa è un viaggiatore o è un acquario .
TestAttemptoLav: [np_coord_VPS] .
TestAttemptoNor: alt , som blir sett av noe er ei reisende eller er en akvarium .
TestAttemptoPol: [np_coord_VPS] .
TestAttemptoSpa: todo que es visto por algo es un viajero o es un acuario .
TestAttemptoSwe: allting , som blir sett av något är en resenär eller är en akvarium .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP tom_PN) (v2VP love_V2 (thereNP_as_NP (at_leastNP (digitsCard (IDig D_2)) (cn_as_VarCN officer_N)))))))
TestAttemptoAce: Tom loves at least 2 officers .
TestAttemptoCat: Tom estima almenys 2 oficials .
TestAttemptoDan: Tom elsker mindst 2 officerer .
TestAttemptoDut: Tom heeft ten minste 2 officieren lief .
TestAttemptoEng: Tom loves at least 2 officers .
TestAttemptoFin: Tom rakastaa vähintään 2 upseeria .
TestAttemptoFre: Tom aime au moins 2 officiers .
TestAttemptoGer: Tom liebt wenigstens 2 Offiziere .
TestAttemptoIta: Tom ama almeno 2 ufficiali .
TestAttemptoLav: Tom mīl vismaz 2 amatpersonas .
TestAttemptoNor: Tom elsker minst 2 offiserer .
TestAttemptoPol: Paryż kocha co najmniej 2 mężczyzn .
TestAttemptoSpa: Tom ama al menos 2 funcionarios .
TestAttemptoSwe: Tom älskar minst 2 befälar .

TestAttempto: baseText (sText (simpleS_as_S (vpS (pnNP lisa_PN) (v2VP buy_V2 (thereNP_as_NP (at_mostNP (digitsCard (IDig D_1)) (cn_as_VarCN present_N)))))))
TestAttemptoAce: Lisa buys at most 1 present .
TestAttemptoCat: Lisa compra com a màxim 1 presentar .
TestAttemptoDan: Lisa køber højst 1 gave .
TestAttemptoDut: Lisa koopt hooguit 1 cadeau .
TestAttemptoEng: Lisa buys at most 1 present .
TestAttemptoFin: Lisa ostaa enintään 1 lahjan .
TestAttemptoFre: Lisa achète au plus 1 cadeau .
TestAttemptoGer: Lisa kauft höchstens 1 Geschenk .
TestAttemptoIta: Lisa compra al massimo 1 regalo .
TestAttemptoLav: Lisa pērk ne vairāk kā 1 klāt .
TestAttemptoNor: Lisa kjøper høyst 1 gave .
TestAttemptoPol: Paryż kupi co najwyżej 1 mężczyznę .
TestAttemptoSpa: Lisa compra a lo más 1 regalo .
TestAttemptoSwe: Lisa köper högst 1 present .

TestAttempto: baseText (sText (simpleS_as_S (vpS (everyNP (cn_as_VarCN traveler_N)) (v2VP see_V2 (thereNP_as_NP (at_leastNP (digitsCard (IDig D_2)) (cn_as_VarCN aquarium_N)))))))
TestAttemptoAce: every traveler sees at least 2 aquariums .
TestAttemptoCat: cada viatger veu almenys 2 aquarins .
TestAttemptoDan: hver rejsende ser mindst 2 akvariumer .
TestAttemptoDut: elke reiziger ziet ten minste 2 aquaria .
TestAttemptoEng: every traveler sees at least 2 aquariums .
TestAttemptoFin: jokainen matkustaja näkee vähintään 2 akvaariota .
TestAttemptoFre: chaque voyageur voit au moins 2 aquariums .
TestAttemptoGer: jeder Reisende sieht wenigstens 2 Aquariume .
TestAttemptoIta: ogni viaggiatore vede almeno 2 acquari .
TestAttemptoLav: ikviens ceļotājs redz vismaz 2 akvāriju .
TestAttemptoNor: hver reisende ser minst 2 akvariumer .
TestAttemptoPol: każdy mężczyzna widzi co najmniej 2 mężczyzn .
TestAttemptoSpa: cada viajero ve al menos 2 acuarios .
TestAttemptoSwe: varje resenär ser minst 2 akvariumar .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (indefPronNP everything_IPron) (predRS which_RP (v2VP buy_V2 (thereNP_as_NP (at_leastNP (digitsCard (IDig D_2)) (cn_as_VarCN present_N)))))) (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N)))))))
TestAttemptoAce: everything which buys at least 2 presents is an officer .
TestAttemptoCat: tot que compra almenys 2 presentars és un oficial .
TestAttemptoDan: alt , som køber mindst 2 gaver er en officer .
TestAttemptoDut: alles , dat ten minste 2 cadeaus koopt is een officier .
TestAttemptoEng: everything which buys at least 2 presents is an officer .
TestAttemptoFin: kaikki , joka ostaa vähintään 2 lahjaa on upseeri .
TestAttemptoFre: tout qui achète au moins 2 cadeaux est un officier .
TestAttemptoGer: alles , das wenigstens 2 Geschenke kauft ist ein Offizier .
TestAttemptoIta: tutto che compra almeno 2 regali è un ufficiale .
TestAttemptoLav: viss , kurš pērk vismaz 2 klāt ir amatpersona .
TestAttemptoNor: alt , som kjøper minst 2 gaver er en offiser .
TestAttemptoPol: wszystko , które kupi co najmniej 2 mężczyzn jest mężczyzną .
TestAttemptoSpa: todo que compra al menos 2 regalos es un funcionario .
TestAttemptoSwe: allting , som köper minst 2 presentar är en befäl .

TestAttempto: baseText (sText (simpleS_as_S (vpS (everyNP (cn_as_VarCN officer_N)) (v2VP see_V2 (thereNP_as_NP (at_mostNP (digitsCard (IDig D_1)) (cn_as_VarCN aquarium_N)))))))
TestAttemptoAce: every officer sees at most 1 aquarium .
TestAttemptoCat: cada oficial veu com a màxim 1 aquari .
TestAttemptoDan: hver officer ser højst 1 akvarium .
TestAttemptoDut: elke officier ziet hooguit 1 aquarium .
TestAttemptoEng: every officer sees at most 1 aquarium .
TestAttemptoFin: jokainen upseeri näkee enintään 1 akvaarion .
TestAttemptoFre: chaque officier voit au plus 1 aquarium .
TestAttemptoGer: jeder Offizier sieht höchstens 1 Aquarium .
TestAttemptoIta: ogni ufficiale vede al massimo 1 acquario .
TestAttemptoLav: ikviena amatpersona redz ne vairāk kā 1 akvāriju .
TestAttemptoNor: hver offiser ser høyst 1 akvarium .
TestAttemptoPol: każdy mężczyzna widzi co najwyżej 1 mężczyznę .
TestAttemptoSpa: cada funcionario ve a lo más 1 acuario .
TestAttemptoSwe: varje befäl ser högst 1 akvarium .

TestAttempto: baseText (sText (simpleS_as_S (vpS (relNP (indefPronNP everything_IPron) (orRS (predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN traveler_N))))) (predRS which_RP (npVP (thereNP_as_NP (aNP (cn_as_VarCN officer_N))))))) (v2VP see_V2 (thereNP_as_NP (at_mostNP (digitsCard (IDig D_1)) (cn_as_VarCN aquarium_N)))))))
TestAttemptoAce: everything which is a traveler or which is an officer sees at most 1 aquarium .
TestAttemptoCat: tot que és un viatger o que és un oficial veu com a màxim 1 aquari .
TestAttemptoDan: alt , som er en rejsende eller som er en officer ser højst 1 akvarium .
TestAttemptoDut: alles , dat een reiziger is of dat een officier is ziet hooguit 1 aquarium .
TestAttemptoEng: everything which is a traveler or which is an officer sees at most 1 aquarium .
TestAttemptoFin: kaikki , joka on matkustaja tai joka on upseeri näkee enintään 1 akvaarion .
TestAttemptoFre: tout qui est un voyageur ou qui est un officier voit au plus 1 aquarium .
TestAttemptoGer: alles , das ein Reisende ist oder das ein Offizier ist sieht höchstens 1 Aquarium .
TestAttemptoIta: tutto che è un viaggiatore o che è un ufficiale vede al massimo 1 acquario .
TestAttemptoLav: viss , kurš ir ceļotājs vai kurš ir amatpersona redz ne vairāk kā 1 akvāriju .
TestAttemptoNor: alt , som er ei reisende eller som er en offiser ser høyst 1 akvarium .
TestAttemptoPol: wszystko , które jest mężczyzną lub , które jest mężczyzną widzi co najwyżej 1 mężczyznę .
TestAttemptoSpa: todo que es un viajero o que es un funcionario ve a lo más 1 acuario .
TestAttemptoSwe: allting , som är en resenär eller som är en befäl ser högst 1 akvarium .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP help_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term Y_Var)) (v2VP help_V2 (termNP (var_Term X_Var)))))))
TestAttemptoAce: if X helps Y then Y helps X .
TestAttemptoCat: si X ajuda Y llavors Y ajuda X .
TestAttemptoDan: hvis X hjælper Y så Y hjælper X .
TestAttemptoDut: als X Y helpt , dan helpt Y X .
TestAttemptoEng: if X helps Y then Y helps X .
TestAttemptoFin: jos X auttaa Y niin Y auttaa X .
TestAttemptoFre: si X aide Y alors Y aide X .
TestAttemptoGer: wenn X Y hilft , dann hilft Y X .
TestAttemptoIta: si X aiuta Y allora Y aiuta X .
TestAttemptoLav: ja X palīdzē Y tad Y palīdzē X .
TestAttemptoNor: hvis X hjelper Y så Y hjelper X .
TestAttemptoPol: jeżeli X czyta Y , to Y czyta X .
TestAttemptoSpa: si X ayuda Y entonces Y ayuda X .
TestAttemptoSwe: om X assisterar Y så Y assisterar X .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (neg_vpS (termNP (var_Term Y_Var)) (v2VP see_V2 (termNP (var_Term X_Var)))))))
TestAttemptoAce: if X sees Y then Y doesn't see X .
TestAttemptoCat: si X veu Y llavors Y no veu X .
TestAttemptoDan: hvis X ser Y så Y ser ikke X .
TestAttemptoDut: als X Y ziet , dan ziet Y niet X .
TestAttemptoEng: if X sees Y then Y doesn't see X .
TestAttemptoFin: jos X näkee Y niin Y ei näe X .
TestAttemptoFre: si X voit Y alors Y ne voit pas X .
TestAttemptoGer: wenn X Y sieht , dann sieht Y X nicht .
TestAttemptoIta: si X vede Y allora Y non vede X .
TestAttemptoLav: ja X redz Y tad Y neredz X .
TestAttemptoNor: hvis X ser Y så Y ser ikke X .
TestAttemptoPol: jeżeli X widzi Y , to Y nie widzi X .
TestAttemptoSpa: si X ve Y entonces Y no ve X .
TestAttemptoSwe: om X ser Y så Y ser inte X .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (relNP (thereNP_as_NP (indefTherePronNP somebody_IPron)) (predRS which_RP (v2VP see_V2 (termNP (var_Term Y_Var)))))))) (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (termNP (var_Term Y_Var)))))))
TestAttemptoAce: if X sees somebody who sees Y then X sees Y .
TestAttemptoCat: si X veu alg˙ que veu Y llavors X veu Y .
TestAttemptoDan: hvis X ser nogen , som ser Y så X ser Y .
TestAttemptoDut: als X iemand , die Y ziet ziet , dan ziet X Y .
TestAttemptoEng: if X sees somebody who sees Y then X sees Y .
TestAttemptoFin: jos X näkee jonkun , joka näkee Y niin X näkee Y .
TestAttemptoFre: si X voit quelqu'un qui voit Y alors X voit Y .
TestAttemptoGer: wenn X jemanden , das Y sieht sieht , dann sieht X Y .
TestAttemptoIta: si X vede qualcuno che vede Y allora X vede Y .
TestAttemptoLav: ja X redz kādu , kurš redz Y tad X redz Y .
TestAttemptoNor: hvis X ser noen , som ser Y så X ser Y .
TestAttemptoPol: jeżeli X widzi kogoś , który widzi Y , to X widzi Y .
TestAttemptoSpa: si X ve algún que ve Y entonces X ve Y .
TestAttemptoSwe: om X ser någon , som ser Y så X ser Y .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP admire_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (termNP (var_Term Y_Var)))))))
TestAttemptoAce: if X admires Y then X sees Y .
TestAttemptoCat: si X admira Y llavors X veu Y .
TestAttemptoDan: hvis X beundrer Y så X ser Y .
TestAttemptoDut: als X Y bewondert , dan ziet X Y .
TestAttemptoEng: if X admires Y then X sees Y .
TestAttemptoFin: jos X ihailee Y niin X näkee Y .
TestAttemptoFre: si X admire Y alors X voit Y .
TestAttemptoGer: wenn X Y bewundert , dann sieht X Y .
TestAttemptoIta: si X ammira Y allora X vede Y .
TestAttemptoLav: ja X gribē Y tad X redz Y .
TestAttemptoNor: hvis X beundrer Y så X ser Y .
TestAttemptoPol: jeżeli X czyta Y , to X widzi Y .
TestAttemptoSpa: si X admira Y entonces X ve Y .
TestAttemptoSwe: om X beundrar Y så X ser Y .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP inspect_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP help_V2 (termNP (var_Term Y_Var)))))))
TestAttemptoAce: if X inspects Y then X helps Y .
TestAttemptoCat: si X inspecciona Y llavors X ajuda Y .
TestAttemptoDan: hvis X inspicerer Y så X hjælper Y .
TestAttemptoDut: als X Y inspecteert , dan helpt X Y .
TestAttemptoEng: if X inspects Y then X helps Y .
TestAttemptoFin: jos X tarkastaa Y niin X auttaa Y .
TestAttemptoFre: si X inspecte Y alors X aide Y .
TestAttemptoGer: wenn X Y inspiziert , dann hilft X Y .
TestAttemptoIta: si X ispeziona Y allora X aiuta Y .
TestAttemptoLav: ja X apskatī Y tad X palīdzē Y .
TestAttemptoNor: hvis X inspiserer Y så X hjelper Y .
TestAttemptoPol: jeżeli X czyta Y , to X czyta Y .
TestAttemptoSpa: si X inspecciona Y entonces X ayuda Y .
TestAttemptoSwe: om X avsynar Y så X assisterar Y .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP help_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term Y_Var)) (v2VP admire_V2 (termNP (var_Term X_Var)))))))
TestAttemptoAce: if X helps Y then Y admires X .
TestAttemptoCat: si X ajuda Y llavors Y admira X .
TestAttemptoDan: hvis X hjælper Y så Y beundrer X .
TestAttemptoDut: als X Y helpt , dan bewondert Y X .
TestAttemptoEng: if X helps Y then Y admires X .
TestAttemptoFin: jos X auttaa Y niin Y ihailee X .
TestAttemptoFre: si X aide Y alors Y admire X .
TestAttemptoGer: wenn X Y hilft , dann bewundert Y X .
TestAttemptoIta: si X aiuta Y allora Y ammira X .
TestAttemptoLav: ja X palīdzē Y tad Y gribē X .
TestAttemptoNor: hvis X hjelper Y så Y beundrer X .
TestAttemptoPol: jeżeli X czyta Y , to Y czyta X .
TestAttemptoSpa: si X ayuda Y entonces Y admira X .
TestAttemptoSwe: om X assisterar Y så Y beundrar X .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP love_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (neg_vpS (termNP (var_Term X_Var)) (v2VP admire_V2 (termNP (var_Term Y_Var)))))))
TestAttemptoAce: if X loves Y then X doesn't admire Y .
TestAttemptoCat: si X estima Y llavors X no admira Y .
TestAttemptoDan: hvis X elsker Y så X beundrer ikke Y .
TestAttemptoDut: als X Y lief heeft , dan bewondert X niet Y .
TestAttemptoEng: if X loves Y then X doesn't admire Y .
TestAttemptoFin: jos X rakastaa Y niin X ei ihaile Y .
TestAttemptoFre: si X aime Y alors X n' admire pas Y .
TestAttemptoGer: wenn X Y liebt , dann bewundert X Y nicht .
TestAttemptoIta: si X ama Y allora X non ammira Y .
TestAttemptoLav: ja X mīl Y tad X negribē Y .
TestAttemptoNor: hvis X elsker Y så X beundrer ikke Y .
TestAttemptoPol: jeżeli X kocha Y , to X nie czyta Y .
TestAttemptoSpa: si X ama Y entonces X no admira Y .
TestAttemptoSwe: om X älskar Y så X beundrar inte Y .

TestAttempto: baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (neg_vpS (termNP (var_Term Y_Var)) (v2VP love_V2 (termNP (var_Term X_Var)))))))
TestAttemptoAce: if X sees Y then Y doesn't love X .
TestAttemptoCat: si X veu Y llavors Y no estima X .
TestAttemptoDan: hvis X ser Y så Y elsker ikke X .
TestAttemptoDut: als X Y ziet , dan heeft Y niet X lief .
TestAttemptoEng: if X sees Y then Y doesn't love X .
TestAttemptoFin: jos X näkee Y niin Y ei rakasta X .
TestAttemptoFre: si X voit Y alors Y n' aime pas X .
TestAttemptoGer: wenn X Y sieht , dann liebt Y X nicht .
TestAttemptoIta: si X vede Y allora Y non ama X .
TestAttemptoLav: ja X redz Y tad Y nemīl X .
TestAttemptoNor: hvis X ser Y så Y elsker ikke X .
TestAttemptoPol: jeżeli X widzi Y , to Y nie kocha X .
TestAttemptoSpa: si X ve Y entonces Y no ama X .
TestAttemptoSwe: om X ser Y så Y älskar inte X .

TestAttempto: consText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP admire_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (termNP (var_Term Y_Var))))))) (baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP see_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP admire_V2 (termNP (var_Term Y_Var))))))))
TestAttemptoAce: if X admires Y then X sees Y . if X sees Y then X admires Y .
TestAttemptoCat: si X admira Y llavors X veu Y . si X veu Y llavors X admira Y .
TestAttemptoDan: hvis X beundrer Y så X ser Y . hvis X ser Y så X beundrer Y .
TestAttemptoDut: als X Y bewondert , dan ziet X Y . als X Y ziet , dan bewondert X Y .
TestAttemptoEng: if X admires Y then X sees Y . if X sees Y then X admires Y .
TestAttemptoFin: jos X ihailee Y niin X näkee Y . jos X näkee Y niin X ihailee Y .
TestAttemptoFre: si X admire Y alors X voit Y . si X voit Y alors X admire Y .
TestAttemptoGer: wenn X Y bewundert , dann sieht X Y . wenn X Y sieht , dann bewundert X Y .
TestAttemptoIta: si X ammira Y allora X vede Y . si X vede Y allora X ammira Y .
TestAttemptoLav: ja X gribē Y tad X redz Y . ja X redz Y tad X gribē Y .
TestAttemptoNor: hvis X beundrer Y så X ser Y . hvis X ser Y så X beundrer Y .
TestAttemptoPol: jeżeli X czyta Y , to X widzi Y . jeżeli X widzi Y , to X czyta Y .
TestAttemptoSpa: si X admira Y entonces X ve Y . si X ve Y entonces X admira Y .
TestAttemptoSwe: om X beundrar Y så X ser Y . om X ser Y så X beundrar Y .

TestAttempto: consText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP inspect_V2 (termNP (var_Term Y_Var))))) (simpleS_as_S (vpS (termNP (var_Term Y_Var)) (v2VP see_V2 (termNP (var_Term X_Var))))))) (baseText (sText (if_thenS (simpleS_as_S (vpS (termNP (var_Term Y_Var)) (v2VP see_V2 (termNP (var_Term X_Var))))) (simpleS_as_S (vpS (termNP (var_Term X_Var)) (v2VP inspect_V2 (termNP (var_Term Y_Var))))))))
TestAttemptoAce: if X inspects Y then Y sees X . if Y sees X then X inspects Y .
TestAttemptoCat: si X inspecciona Y llavors Y veu X . si Y veu X llavors X inspecciona Y .
TestAttemptoDan: hvis X inspicerer Y så Y ser X . hvis Y ser X så X inspicerer Y .
TestAttemptoDut: als X Y inspecteert , dan ziet Y X . als Y X ziet , dan inspecteert X Y .
TestAttemptoEng: if X inspects Y then Y sees X . if Y sees X then X inspects Y .
TestAttemptoFin: jos X tarkastaa Y niin Y näkee X . jos Y näkee X niin X tarkastaa Y .
TestAttemptoFre: si X inspecte Y alors Y voit X . si Y voit X alors X inspecte Y .
TestAttemptoGer: wenn X Y inspiziert , dann sieht Y X . wenn Y X sieht , dann inspiziert X Y .
TestAttemptoIta: si X ispeziona Y allora Y vede X . si Y vede X allora X ispeziona Y .
TestAttemptoLav: ja X apskatī Y tad Y redz X . ja Y redz X tad X apskatī Y .
TestAttemptoNor: hvis X inspiserer Y så Y ser X . hvis Y ser X så X inspiserer Y .
TestAttemptoPol: jeżeli X czyta Y , to Y widzi X . jeżeli Y widzi X , to X czyta Y .
TestAttemptoSpa: si X inspecciona Y entonces Y ve X . si Y ve X entonces X inspecciona Y .
TestAttemptoSwe: om X avsynar Y så Y ser X . om Y ser X så X avsynar Y .


